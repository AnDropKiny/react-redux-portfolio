{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","components/utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["ComicsList","useState","list","setList","newItemLoading","setItemLoad","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","procces","setProcces","useEffect","onRequest","initial","console","log","then","mountComicsList","newComicsList","ended","newSpinner","Spinner","className","setContentList","elements","map","item","i","id","title","thumbnail","price","to","src","alt","viewComicsList","disabled","style","onClick","ComicsPage","AppBanner","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_getBase","_getApiKey","getAllCharacters","a","res","results","_getTransformChar","getCharactersById","getCharacterByName","name","_getTransformComics","getComics","char","description","path","extension","homepage","urls","wiki","comics","items","pageCount","language","textObjects","prices","Skeleton","Component","width","ErrorMsg","setContent","avengers","avengersLogo"],"mappings":"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","file":"static/js/5.a0a41de5.chunk.js","sourcesContent":["import './comicsList.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { setContentList } from '../utils/setContent';\n\nimport Spinner from '../spinner/Spinner';\n\nconst ComicsList = () => {\n\n    const [list, setList] = useState([]);\n    const [newItemLoading, setItemLoad] = useState(false);\n    const [offset, setOffset] = useState();\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const { getAllComics, procces, setProcces } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n\n    const onRequest = (offset, initial) => {\n        console.log(\"request\")\n        initial ? setItemLoad(false) : setItemLoad(true);\n\n        getAllComics(offset)\n            .then(mountComicsList)\n            .then(() => setProcces('loaded'))\n\n    }\n    const mountComicsList = (newComicsList) => {\n        let ended = false;\n        if (newComicsList < 8) {\n            ended = true;\n        }\n\n        setList(list => [...list, ...newComicsList]);\n        setItemLoad(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n\n    }\n\n\n    function viewComicsList(list) {\n        const elements = list.map((item, i) => {\n            const { id, title, thumbnail, price } = item;\n            return (\n                <li className=\"comics__item\"\n                    key={i + id}>\n                    <Link to={`/comics/${id}`}>\n                        <img src={thumbnail} alt={title} className=\"comics__item-img\" />\n                        <div className=\"comics__item-name\">{title}</div>\n                        <div className=\"comics__item-price\">{price}</div>\n                    </Link>\n                </li>\n            );\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {elements}\n            </ul>)\n\n    }\n\n    const newSpinner = procces === \"loading\" && newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {setContentList(procces, () => viewComicsList(list), newItemLoading)}\n            {newSpinner}\n\n            <button className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\nexport default ComicsPage;\r\n\r\n\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { procces, setProcces, request, clearError } = useHttp();\r\n\r\n    const _getBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _getApiKey = 'apikey=320ff7c6ceeda2954463fb73190f424a';\r\n    const _baseOffset = 210;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_getBase}characters?limit=9&offset=${offset}&${_getApiKey}`);\r\n        return res.data.results.map(_getTransformChar)\r\n    }\r\n    const getCharactersById = async (id) => {\r\n        const res = await request(`${_getBase}characters/${id}?${_getApiKey}`);\r\n        return _getTransformChar(res.data.results[0]);\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_getBase}characters?name=${name}&${_getApiKey}`);\r\n        return res.data.results.map(_getTransformChar);\r\n    }\r\n    const getAllComics = async (offset = 250) => {\r\n        const res = await request(`${_getBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_getApiKey}`);\r\n        return res.data.results.map(_getTransformComics)\r\n\r\n    }\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_getBase}comics/${id}?${_getApiKey}`);\r\n        return _getTransformComics(res.data.results[0]);\r\n    }\r\n    const _getTransformChar = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _getTransformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n    return {\r\n        procces,\r\n        setProcces,\r\n        getAllCharacters,\r\n        getCharactersById,\r\n        clearError,\r\n        getAllComics,\r\n        getComics,\r\n        getCharacterByName\r\n    }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [procces, setProcces] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcces('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n        } catch (e) {\r\n            setProcces('error')\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcces('loading')\r\n\r\n    }, []);\r\n\r\n    return { procces, setProcces, request, clearError, }\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from '../skeleton/Skeleton'\r\nimport ErrorMsg from '../errorMsg/ErrorMsg';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\n\r\nconst setContent = (procces, Component, data) => {\r\n    switch (procces) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'loaded':\r\n            return <Component data={data} />\r\n        case 'error':\r\n            return <ErrorMsg />\r\n        default: new Error('error in specified process')\r\n    }\r\n}\r\n\r\nexport const setContentList = (procces, Component, newItemLoading) => {\r\n    switch (procces) {\r\n        case 'waiting':\r\n            return <Spinner width={'1100px'} />;\r\n        case 'loading':\r\n            return newItemLoading ? <Component /> : <Spinner />;\r\n        case 'loaded':\r\n            return <Component />\r\n        case 'error':\r\n            return <ErrorMsg />\r\n        default: new Error('error in specified process')\r\n    }\r\n}\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}
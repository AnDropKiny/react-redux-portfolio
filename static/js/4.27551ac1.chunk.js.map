{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/charSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","components/utils/setContent.js"],"names":["RandomChar","useState","char","setChar","useMarvelService","getCharactersById","clearError","procces","setProcces","useEffect","updateChar","onCharLoaded","description","length","substring","id","Math","floor","random","then","className","setContent","data","name","thumbnail","homepage","wiki","objectFit","indexOf","src","alt","style","href","onClick","mjolnir","CharList","props","list","setList","newItemLoading","setItemLoad","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","mountCharsList","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","newSpinner","Spinner","elements","useMemo","setContentList","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","viewCharsList","disabled","View","comics","CharInfo","charId","CharSearchForm","getCharacterByName","uploadChar","errorMessage","ErrorMsg","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","MainPage","selectedChar","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_getBase","_getApiKey","a","res","_getTransformChar","getAllComics","_getTransformComics","getComics","path","extension","urls","items","title","pageCount","language","textObjects","price","prices","Skeleton","Component","width"],"mappings":"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","file":"static/js/4.27551ac1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\n\nimport setContent from '../utils/setContent';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport './randomChar.scss';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const { getCharactersById, clearError, procces, setProcces } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [])\n\n\n    const onCharLoaded = (char) => {\n        if (!char.description) {\n            char.description = \"There is no description for this character.\"\n        }\n\n        else if (char.description.length > 215) {\n            char.description = char.description.substring(0, 210) + \"...\"\n        }\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharactersById(id)\n            .then(onCharLoaded)\n            .then(() => setProcces('loaded'))\n    }\n\n    function ViewBox({ data }) {\n        const { name, description, thumbnail, homepage, wiki } = data;\n\n        let objectFit = { 'objectFit': 'cover' };\n        if (thumbnail) {\n            if (thumbnail.indexOf('image_not_available') !== -1) {\n                objectFit = { 'objectFit': \"unset\" }\n            }\n        }\n\n        return (\n            <div className=\"randomchar__block\">\n                <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={objectFit} />\n                <div className=\"randomchar__info\">\n                    <p className=\"randomchar__name\">{name}</p>\n                    <p className=\"randomchar__descr\">{description}</p>\n                    <div className=\"randomchar__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"randomchar\">\n\n            {setContent(procces, ViewBox, char)}\n\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={() => updateChar()}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nexport default RandomChar;","import './charList.scss';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { setContentList } from '../utils/setContent';\n\nimport Spinner from '../spinner/Spinner';\n\nconst CharList = (props) => {\n\n    const [list, setList] = useState([]);\n    const [newItemLoading, setItemLoad] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, procces, setProcces } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setItemLoad(false) : setItemLoad(true);\n\n        getAllCharacters(offset)\n            .then(mountCharsList)\n            .then(() => setProcces('loaded'))\n\n    }\n    const mountCharsList = (newCharList) => {\n        let ended = false;\n        if (newCharList < 9) {\n            ended = true;\n        }\n\n        setList(list => [...list, ...newCharList]);\n        setItemLoad(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n    let itemRefs = useRef([]);\n\n    function focusOnItem(id) {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    function viewCharsList(list) {\n        const elements = list.map((item, i) => {\n            const { id, name, thumbnail } = item;\n\n            let objectFit = thumbnail.indexOf('image_not_available') !== -1 ? { objectFit: \"unset\" } : { objectFit: \"cover\" };\n            return (\n                <li className=\"char__item\"\n                    key={id}\n                    tabIndex={0}\n                    ref={el => {\n                        itemRefs.current[i] = el;\n                    }}\n\n                    onClick={() => {\n                        props.onCharSelected(id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(id);\n                            focusOnItem(i);\n                        }\n                    }}\n                >\n                    <img src={thumbnail} alt=\"abyss\" style={objectFit} />\n                    <div className=\"char__name\">{name}</div>\n                </li>\n            );\n        });\n\n        return (\n            <ul className=\"char__grid\" >\n                {elements}\n            </ul>)\n\n    }\n\n\n    const newSpinner = procces === \"loading\" && newItemLoading ? <Spinner /> : null;\n\n    const elements = useMemo(() => {\n        return setContentList(procces, () => viewCharsList(list), newItemLoading)\n        // eslint-disable-next-line\n    }, [procces])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            {newSpinner}\n\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\nexport default CharList;","import './charInfo.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport setContent from '../utils/setContent';\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { getCharactersById, clearError, procces, setProcces } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharactersById(charId)\n            .then(setChar)\n            .then(() => setProcces('loaded'))\n    }\n    return (\n        <div className=\"char__info\">\n            {setContent(procces, View, char)}\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n    let objectFit = thumbnail.indexOf('image_not_available') !== -1 ? { objectFit: \"contain\" } : { objectFit: \"cover\" }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={objectFit} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : \"There is no comics with this character\"}\n                {\n                    // eslint-disable-next-line\n                    comics.map((item, i) => {\n                        if (i < 10) {\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </li>\n                            )\n                        }\n                    })\n                }\n            </ul>\n        </>\n    )\n\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Formik, Field, Form, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ErrorMsg from '../errorMsg/ErrorMsg';\r\nimport * as Yup from 'yup';\r\nimport './charSearchForm.scss'\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\n\r\nconst CharSearchForm = () => {\r\n\r\n    const [char, setChar] = useState();\r\n    const { getCharacterByName, clearError, procces, setProcces } = useMarvelService();\r\n\r\n    function uploadChar(char) {\r\n        setChar(char);\r\n    }\r\n\r\n    const getCharByName = (name) => {\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(uploadChar)\r\n            .then(() => setProcces('loaded'))\r\n    }\r\n\r\n    const errorMessage = procces === 'error' ? <div className=\"char__search-critical-error\"><ErrorMsg /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    getCharByName(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={procces === 'loading' ? true : false}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/charSearchForm\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport { useState } from \"react\";\r\n\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <RandomChar />\r\n            <div className=\"char__content\">\r\n                <CharList onCharSelected={onCharSelected} />\r\n                <div>\r\n                    <CharInfo charId={selectedChar} />\r\n                    <CharSearchForm />\r\n                </div>\r\n\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { procces, setProcces, request, clearError } = useHttp();\r\n\r\n    const _getBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _getApiKey = 'apikey=320ff7c6ceeda2954463fb73190f424a';\r\n    const _baseOffset = 210;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_getBase}characters?limit=9&offset=${offset}&${_getApiKey}`);\r\n        return res.data.results.map(_getTransformChar)\r\n    }\r\n    const getCharactersById = async (id) => {\r\n        const res = await request(`${_getBase}characters/${id}?${_getApiKey}`);\r\n        return _getTransformChar(res.data.results[0]);\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_getBase}characters?name=${name}&${_getApiKey}`);\r\n        return res.data.results.map(_getTransformChar);\r\n    }\r\n    const getAllComics = async (offset = 250) => {\r\n        const res = await request(`${_getBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_getApiKey}`);\r\n        return res.data.results.map(_getTransformComics)\r\n\r\n    }\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_getBase}comics/${id}?${_getApiKey}`);\r\n        return _getTransformComics(res.data.results[0]);\r\n    }\r\n    const _getTransformChar = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _getTransformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n    return {\r\n        procces,\r\n        setProcces,\r\n        getAllCharacters,\r\n        getCharactersById,\r\n        clearError,\r\n        getAllComics,\r\n        getComics,\r\n        getCharacterByName\r\n    }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [procces, setProcces] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcces('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n        } catch (e) {\r\n            setProcces('error')\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcces('loading')\r\n\r\n    }, []);\r\n\r\n    return { procces, setProcces, request, clearError, }\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from '../skeleton/Skeleton'\r\nimport ErrorMsg from '../errorMsg/ErrorMsg';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\n\r\nconst setContent = (procces, Component, data) => {\r\n    switch (procces) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'loaded':\r\n            return <Component data={data} />\r\n        case 'error':\r\n            return <ErrorMsg />\r\n        default: new Error('error in specified process')\r\n    }\r\n}\r\n\r\nexport const setContentList = (procces, Component, newItemLoading) => {\r\n    switch (procces) {\r\n        case 'waiting':\r\n            return <Spinner width={'1100px'} />;\r\n        case 'loading':\r\n            return newItemLoading ? <Component /> : <Spinner />;\r\n        case 'loaded':\r\n            return <Component />\r\n        case 'error':\r\n            return <ErrorMsg />\r\n        default: new Error('error in specified process')\r\n    }\r\n}\r\nexport default setContent;"],"sourceRoot":""}
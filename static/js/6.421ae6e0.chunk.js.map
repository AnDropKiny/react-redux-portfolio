{"version":3,"sources":["components/pages/SinglePage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","components/utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["SinglePage","BaseComponent","dataType","useState","data","setData","useMarvelService","getComics","clearError","getCharactersById","procces","setProcces","id","useParams","useEffect","updateData","then","Error","className","setContent","to","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_getBase","_getApiKey","getAllCharacters","a","offset","res","results","map","_getTransformChar","getCharacterByName","name","getAllComics","_getTransformComics","char","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","Skeleton","setContentList","Component","newItemLoading","Spinner","width","ErrorMsg","AppBanner","src","avengers","alt","avengersLogo"],"mappings":"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","file":"static/js/6.421ae6e0.chunk.js","sourcesContent":["import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../utils/setContent';\r\n\r\n\r\nimport '../pages/singleComic.scss';\r\nconst SinglePage = ({ BaseComponent, dataType }) => {\r\n    const [data, setData] = useState({});\r\n    const { getComics, clearError, getCharactersById, procces, setProcces } = useMarvelService();\r\n    const { id } = useParams();\r\n\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n        // eslint-disable-next-line\r\n    }, [id])\r\n\r\n    const updateData = () => {\r\n        clearError();\r\n\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComics(id)\r\n                    .then(setData).then(() => setProcces('loaded'))\r\n                break;\r\n            case 'character':\r\n                getCharactersById(id)\r\n                    .then(setData).then(() => setProcces('loaded'))\r\n                break;\r\n            default: new Error(\"dataType incorrect\")\r\n        }\r\n    }\r\n\r\n    // const errorMsg = error ? <ErrorMsg /> : null,\r\n    //     spinner = loading ? <Spinner width={'1100px'} /> : null,\r\n    //     content = !(loading || error) ? <BaseComponent data={data} /> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <div className=\"single-comic\">\r\n\r\n                {setContent(procces, BaseComponent, data)}\r\n\r\n                <Link to={dataType === 'comic' ? '/comics' : '/'} className=\"single-comic__back\">Back to all</Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default SinglePage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { procces, setProcces, request, clearError } = useHttp();\r\n\r\n    const _getBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _getApiKey = 'apikey=320ff7c6ceeda2954463fb73190f424a';\r\n    const _baseOffset = 210;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_getBase}characters?limit=9&offset=${offset}&${_getApiKey}`);\r\n        return res.data.results.map(_getTransformChar)\r\n    }\r\n    const getCharactersById = async (id) => {\r\n        const res = await request(`${_getBase}characters/${id}?${_getApiKey}`);\r\n        return _getTransformChar(res.data.results[0]);\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_getBase}characters?name=${name}&${_getApiKey}`);\r\n        return res.data.results.map(_getTransformChar);\r\n    }\r\n    const getAllComics = async (offset = 250) => {\r\n        const res = await request(`${_getBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_getApiKey}`);\r\n        return res.data.results.map(_getTransformComics)\r\n\r\n    }\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_getBase}comics/${id}?${_getApiKey}`);\r\n        return _getTransformComics(res.data.results[0]);\r\n    }\r\n    const _getTransformChar = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _getTransformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n    return {\r\n        procces,\r\n        setProcces,\r\n        getAllCharacters,\r\n        getCharactersById,\r\n        clearError,\r\n        getAllComics,\r\n        getComics,\r\n        getCharacterByName\r\n    }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [procces, setProcces] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcces('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n        } catch (e) {\r\n            setProcces('error')\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcces('loading')\r\n\r\n    }, []);\r\n\r\n    return { procces, setProcces, request, clearError, }\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from '../skeleton/Skeleton'\r\nimport ErrorMsg from '../errorMsg/ErrorMsg';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\n\r\nconst setContent = (procces, Component, data) => {\r\n    switch (procces) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'loaded':\r\n            return <Component data={data} />\r\n        case 'error':\r\n            return <ErrorMsg />\r\n        default: new Error('error in specified process')\r\n    }\r\n}\r\n\r\nexport const setContentList = (procces, Component, newItemLoading) => {\r\n    switch (procces) {\r\n        case 'waiting':\r\n            return <Spinner width={'1100px'} />;\r\n        case 'loading':\r\n            return newItemLoading ? <Component /> : <Spinner />;\r\n        case 'loaded':\r\n            return <Component />\r\n        case 'error':\r\n            return <ErrorMsg />\r\n        default: new Error('error in specified process')\r\n    }\r\n}\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}